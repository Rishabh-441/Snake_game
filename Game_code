import pygame 
from pygame.locals import * 
import time
import random


size=40
BACKGROUND_COLOR=(110,110,5)

class Apple:
    def __init__(self,parent_screen):
        self.image=pygame.image.load("apple.jpg").convert()
        self.parent_screen=parent_screen
        self.x=size*2
        self.y=size*2

    def draw(self):
        self.parent_screen.blit(self.image,(self.x,self.y))
        pygame.display.flip()

    def move(self):
        self.x=random.randint(1,22)*40
        self.y=random.randint(1,18)*40

class Snake:
    def __init__(self,parent_screen,length):
        self.length=length
        self.parent_screen=parent_screen
        self.block=pygame.image.load("snakeblock2.jpg").convert()
        self.x=[size]*self.length
        self.y=[size]*self.length
        self.direction='right'

    def increase_length(self):
        self.length+=1
        self.x.append(-1)
        self.y.append(-1)
    
    def draw(self):
        self.parent_screen.fill((110,110,1))
        for i in range(self.length):
            self.parent_screen.blit(self.block,(self.x[i],self.y[i]))
        pygame.display.flip()

    def move_left(self):
        self.direction='left'
    
    def move_right(self):
        self.direction="right"

    def move_up(self):
        self.direction="up"

    def move_down(self):
        self.direction="down"
    
    def walk(self):
        for i in range(self.length-1,0,-1):
            self.x[i]=self.x[i-1]
            self.y[i]=self.y[i-1]

        if self.direction=='up':
            self.y[0]-=40
        elif self.direction=='down':
            self.y[0]+=40
        elif self.direction=='right':
            self.x[0]+=40
        elif self.direction=='left':
            self.x[0]-=40
        
        self.draw()

class Game:
    def __init__(self):
        pygame.init()
        self.i=0
        self.parent_screen=pygame.display.set_mode((1000,800))
        self.parent_screen.fill(BACKGROUND_COLOR)
        self.snake=Snake(self.parent_screen,1)
        self.snake.draw()
        self.apple=Apple(self.parent_screen)
        self.apple.draw()
    
    def is_collision(self,x1,y1,x2,y2):
        if x1>=x2 and x1<x2+size:
            if y1>=y2 and y1<y2+size:
                return True
        return False
    
    def wall_collision(self,x1,y1):
        if x1<0 or x1>1000:
            return True
        elif y1<0 or y1>800:
            return True
        return False

    
    def play(self):
        self.snake.walk()
        self.apple.draw()
        self.display_score()
        pygame.display.flip()

        #apple eating
        if self.is_collision(self.snake.x[0],self.snake.y[0],self.apple.x,self.apple.y):
            self.i+=0.001
            self.snake.increase_length()
            self.apple.move()

        #colliding with itself
        for i in range(3,self.snake.length):
            if self.is_collision(self.snake.x[0],self.snake.y[0],self.snake.x[i],self.snake.y[i]):
                raise "GAME OVER"

        #colliding with wall
        if self.wall_collision(self.snake.x[0],self.snake.y[0]):
            raise "GAME OVER"

    def display_score(self):
        font=pygame.font.SysFont('arial',22)
        score=font.render(f"score:{self.snake.length-1}",True,(255,255,255))
        self.parent_screen.blit(score,(800,10))

    def show_game_over(self):
        self.parent_screen.fill(BACKGROUND_COLOR)
        font=pygame.font.SysFont('arial',50)
        line1=font.render(f"!!!GAME OVER!!!YOUR SCORE IS {self.snake.length-1}",True,(255,255,255))
        self.parent_screen.blit(line1,(100,200))
        line2=font.render(f"**press ENTER to play again**",True,(255,255,255))
        self.parent_screen.blit(line2,(100,400))
        line3=font.render(f"**press ESC to exit**",True,(255,255,255))
        self.parent_screen.blit(line3,(100,600))
        pygame.display.flip()

    def reset(self):
        self.snake=Snake(self.parent_screen,1)
        self.apple=Apple(self.parent_screen)

    def run(self):
        running=True
        pause=False
        while running:
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        running=False

                    if event.key == K_RETURN:
                        pause = False

                    if not pause:
                        if event.key == K_UP:
                            self.snake.move_up()

                        if event.key == K_DOWN:
                            self.snake.move_down()

                        if event.key == K_LEFT:
                            self.snake.move_left()

                        if event.key == K_RIGHT:
                            self.snake.move_right()
                    
                elif event.type ==  QUIT:
                    running= False
            try:
                if not pause:
                    self.play()
            except Exception as e:
                self.show_game_over()
                pause = True
                self.reset()
            time.sleep(0.2-self.i*5)


if __name__=="__main__":

    game=Game()
    game.run()
